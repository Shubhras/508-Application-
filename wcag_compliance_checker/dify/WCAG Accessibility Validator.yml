app:
  description: Comprehensive WCAG 2.1/2.2 accessibility validation and AI-powered
    remediation workflow. Analyzes web content for accessibility compliance and provides
    detailed remediation suggestions with code examples.
  icon: ♿
  icon_background: '#E3F2FD'
  mode: advanced-chat
  name: WCAG Accessibility Validator & Remediation
  use_icon_as_answer_icon: false
dependencies:
- current_identifier: null
  type: marketplace
  value:
    marketplace_plugin_unique_identifier: langgenius/openai:0.0.26@c1e643ac6a7732f6333a783320b4d3026fa5e31d8e7026375b98d44418d33f26
kind: app
version: 0.3.0
workflow:
  conversation_variables:
  - description: Stores accessibility analysis results including errors, warnings,
      and passed criteria
    id: accessibility-results
    name: accessibility_results
    selector:
    - conversation
    - accessibility_results
    value: []
    value_type: array[object]
  - description: Stores AI-generated remediation suggestions and code fixes
    id: remediation-data
    name: remediation_data
    selector:
    - conversation
    - remediation_data
    value: []
    value_type: array[object]
  environment_variables: []
  features:
    file_upload:
      allowed_file_extensions:
      - .HTML
      - .HTM
      - .TXT
      allowed_file_types:
      - document
      allowed_file_upload_methods:
      - local_file
      enabled: true
      fileUploadConfig:
        audio_file_size_limit: 50
        batch_count_limit: 5
        file_size_limit: 15
        image_file_size_limit: 10
        video_file_size_limit: 100
        workflow_file_upload_limit: 10
      image:
        enabled: false
        number_limits: 3
        transfer_methods:
        - local_file
        - remote_url
      number_limits: 3
    opening_statement: Welcome to the WCAG Accessibility Validator & Remediation Tool!
      🛡️\n\nI can help you:\n✅ Analyze websites and HTML content for WCAG 2.1/2.2
      compliance\n🔧 Provide AI-powered accessibility fixes\n📊 Generate detailed compliance
      reports\n🎯 Offer step-by-step remediation guidance\n\nTo get started, please
      provide:\n• A website URL to analyze\n• HTML content to validate\n• Specific
      accessibility concerns\n\nWhat would you like me to check for accessibility
      compliance?
    retriever_resource:
      enabled: false
    sensitive_word_avoidance:
      enabled: false
    speech_to_text:
      enabled: false
    suggested_questions:
    - Analyze my website homepage for WCAG AA compliance
    - Check this HTML form for accessibility issues
    - Generate a comprehensive accessibility report
    - What are the most critical accessibility fixes needed?
    suggested_questions_after_answer:
      enabled: true
    text_to_speech:
      enabled: false
      language: ''
      voice: ''
  graph:
    edges:
    - data:
        isInIteration: false
        sourceType: start
        targetType: llm
      id: start-input-analysis
      source: start-node
      sourceHandle: source
      target: input-analysis
      targetHandle: target
      type: custom
    - data:
        isInIteration: false
        sourceType: llm
        targetType: if-else
      id: input-analysis-content-type-check
      source: input-analysis
      sourceHandle: source
      target: content-type-check
      targetHandle: target
      type: custom
    - data:
        isInIteration: false
        sourceType: if-else
        targetType: code
      id: content-type-check-true-url-processor
      source: content-type-check
      sourceHandle: 'true'
      target: url-processor
      targetHandle: target
      type: custom
    - data:
        isInIteration: false
        sourceType: if-else
        targetType: code
      id: content-type-check-false-html-processor
      source: content-type-check
      sourceHandle: 'false'
      target: html-processor
      targetHandle: target
      type: custom
    - data:
        isInIteration: false
        sourceType: code
        targetType: llm
      id: url-processor-wcag-analyzer
      source: url-processor
      sourceHandle: source
      target: wcag-analyzer
      targetHandle: target
      type: custom
    - data:
        isInIteration: false
        sourceType: code
        targetType: llm
      id: html-processor-wcag-analyzer
      source: html-processor
      sourceHandle: source
      target: wcag-analyzer
      targetHandle: target
      type: custom
    - data:
        isInIteration: false
        sourceType: llm
        targetType: code
      id: wcag-analyzer-issue-categorizer
      source: wcag-analyzer
      sourceHandle: source
      target: issue-categorizer
      targetHandle: target
      type: custom
    - data:
        isInIteration: false
        sourceType: code
        targetType: assigner
      id: issue-categorizer-results-storage
      source: issue-categorizer
      sourceHandle: source
      target: results-storage
      targetHandle: target
      type: custom
    - data:
        isInIteration: false
        sourceType: assigner
        targetType: if-else
      id: results-storage-remediation-check
      source: results-storage
      sourceHandle: source
      target: remediation-check
      targetHandle: target
      type: custom
    - data:
        isInIteration: false
        sourceType: if-else
        targetType: llm
      id: remediation-check-true-ai-remediator
      source: remediation-check
      sourceHandle: 'true'
      target: ai-remediator
      targetHandle: target
      type: custom
    - data:
        isInIteration: false
        sourceType: llm
        targetType: code
      id: ai-remediator-code-generator
      source: ai-remediator
      sourceHandle: source
      target: code-generator
      targetHandle: target
      type: custom
    - data:
        isInIteration: false
        sourceType: code
        targetType: assigner
      id: code-generator-remediation-storage
      source: code-generator
      sourceHandle: source
      target: remediation-storage
      targetHandle: target
      type: custom
    - data:
        isInIteration: false
        sourceType: assigner
        targetType: llm
      id: remediation-storage-report-generator
      source: remediation-storage
      sourceHandle: source
      target: report-generator
      targetHandle: target
      type: custom
    - data:
        isInIteration: false
        sourceType: if-else
        targetType: llm
      id: remediation-check-false-basic-report
      source: remediation-check
      sourceHandle: 'false'
      target: basic-report
      targetHandle: target
      type: custom
    - data:
        isInIteration: false
        sourceType: llm
        targetType: answer
      id: report-generator-final-output
      source: report-generator
      sourceHandle: source
      target: final-output
      targetHandle: target
      type: custom
    - data:
        isInIteration: false
        sourceType: llm
        targetType: answer
      id: basic-report-simple-output
      source: basic-report
      sourceHandle: source
      target: simple-output
      targetHandle: target
      type: custom
    nodes:
    - data:
        desc: Entry point for WCAG accessibility validation workflow
        selected: false
        title: Start Accessibility Analysis
        type: start
        variables: []
      height: 54
      id: start-node
      position:
        x: 30
        y: 300
      positionAbsolute:
        x: 30
        y: 300
      type: custom
      width: 244
    - data:
        context:
          enabled: false
          variable_selector: []
        desc: Analyzes user input to determine content type and validation scope
        model:
          completion_params:
            temperature: 0.3
          mode: chat
          name: gpt-4o
          provider: langgenius/openai/openai
        prompt_template:
        - id: input-analysis-prompt
          role: system
          text: 'You are an accessibility validation expert. Analyze the user''s input
            to determine what type of content needs WCAG validation.


            User input: {{#sys.query#}}


            Determine:

            1. Is this a URL/website to analyze? (starts with http/https, contains
            domain)

            2. Is this HTML content to validate? (contains HTML tags)

            3. What WCAG compliance level is requested? (A, AA, AAA - default to AA)

            4. Which WCAG version? (2.0, 2.1, 2.2 - default to 2.1)


            Respond with ONLY "URL" or "HTML" based on the content type.

            If unclear, respond "HTML".

            '
        selected: false
        title: Input Analysis
        type: llm
        variables: []
        vision:
          enabled: false
      height: 96
      id: input-analysis
      position:
        x: 334
        y: 300
      positionAbsolute:
        x: 334
        y: 300
      type: custom
      width: 244
    - data:
        cases:
        - case_id: 'true'
          conditions:
          - comparison_operator: contains
            id: url-check-condition
            value: URL
            varType: string
            variable_selector:
            - input-analysis
            - text
          id: 'true'
          logical_operator: and
        desc: Routes processing based on content type (URL vs HTML)
        selected: false
        title: Content Type Router
        type: if-else
      height: 126
      id: content-type-check
      position:
        x: 638
        y: 300
      positionAbsolute:
        x: 638
        y: 300
      type: custom
      width: 244
    - data:
        code: "def main(user_input: str) -> dict:\n    \"\"\"\n    Process URL input\
          \ for accessibility analysis\n    Extracts domain, validates URL format,\
          \ and prepares for WCAG checking\n    \"\"\"\n    import re\n    \n    #\
          \ Extract URL from user input\n    url_pattern = r'https?://[^\\s<>\"{}|\\\
          \\^`[\\]]+'\n    urls = re.findall(url_pattern, user_input)\n    \n    if\
          \ urls:\n        url = urls[0]\n        # Extract domain for context\n \
          \       domain_match = re.search(r'https?://([^/]+)', url)\n        domain\
          \ = domain_match.group(1) if domain_match else 'unknown'\n        \n   \
          \     return {\n            \"processed_content\": f\"Website URL: {url}\"\
          ,\n            \"content_type\": \"url\",\n            \"target_url\": url,\n\
          \            \"domain\": domain,\n            \"status\": \"URL identified\
          \ and validated\"\n        }\n    else:\n        return {\n            \"\
          processed_content\": \"No valid URL found in input\",\n            \"content_type\"\
          : \"error\",\n            \"status\": \"URL validation failed\"\n      \
          \  }\n"
        code_language: python3
        desc: Processes and validates URL input for accessibility analysis
        outputs:
          content_type:
            type: string
          domain:
            type: string
          processed_content:
            type: string
          status:
            type: string
          target_url:
            type: string
        selected: false
        title: URL Content Processor
        type: code
        variables:
        - value_selector:
          - sys
          - query
          variable: user_input
      height: 54
      id: url-processor
      position:
        x: 942
        y: 200
      positionAbsolute:
        x: 942
        y: 200
      type: custom
      width: 244
    - data:
        code: "def main(user_input: str) -> dict:\n    \"\"\"\n    Process HTML content\
          \ for accessibility analysis\n    Cleans and validates HTML structure\n\
          \    \"\"\"\n    import re\n    \n    # Basic HTML detection and cleaning\n\
          \    if '<html' in user_input.lower() or '<' in user_input:\n        # Remove\
          \ excessive whitespace but preserve structure\n        cleaned_html = re.sub(r'\\\
          s+', ' ', user_input.strip())\n        \n        # Count basic elements\
          \ for analysis\n        img_count = len(re.findall(r'<img[^>]*>', cleaned_html,\
          \ re.IGNORECASE))\n        form_count = len(re.findall(r'<form[^>]*>', cleaned_html,\
          \ re.IGNORECASE))\n        heading_count = len(re.findall(r'<h[1-6][^>]*>',\
          \ cleaned_html, re.IGNORECASE))\n        \n        return {\n          \
          \  \"processed_content\": cleaned_html[:2000] + \"...\" if len(cleaned_html)\
          \ > 2000 else cleaned_html,\n            \"content_type\": \"html\",\n \
          \           \"element_stats\": {\n                \"images\": img_count,\n\
          \                \"forms\": form_count,\n                \"headings\": heading_count\n\
          \            },\n            \"status\": \"HTML content processed and analyzed\"\
          \n        }\n    else:\n        return {\n            \"processed_content\"\
          : user_input,\n            \"content_type\": \"text\",\n            \"status\"\
          : \"Treated as general accessibility inquiry\"\n        }\n"
        code_language: python3
        desc: Processes and validates HTML content for accessibility analysis
        outputs:
          content_type:
            type: string
          element_stats:
            type: object
          processed_content:
            type: string
          status:
            type: string
        selected: false
        title: HTML Content Processor
        type: code
        variables:
        - value_selector:
          - sys
          - query
          variable: user_input
      height: 54
      id: html-processor
      position:
        x: 942
        y: 400
      positionAbsolute:
        x: 942
        y: 400
      type: custom
      width: 244
    - data:
        context:
          enabled: false
          variable_selector: []
        desc: Performs comprehensive WCAG 2.1/2.2 accessibility analysis
        model:
          completion_params:
            temperature: 0.2
          mode: chat
          name: gpt-4o
          provider: langgenius/openai/openai
        prompt_template:
        - id: wcag-analysis-prompt
          role: system
          text: "You are a WCAG 2.1/2.2 accessibility expert. Perform a comprehensive\
            \ accessibility analysis of the provided content.\n\nContent to analyze:\n\
            {{#url-processor.processed_content#}}{{#html-processor.processed_content#}}\n\
            \nAnalyze for WCAG 2.1 Level AA compliance. Check for:\n\n**CRITICAL ERRORS\
            \ (WCAG Level A):**\n1. Images without alt attributes (1.1.1)\n2. Missing\
            \ form labels (1.3.1, 3.3.2)\n3. Missing page language (3.1.1)\n4. Non-descriptive\
            \ link text (2.4.4)\n5. Missing heading hierarchy (1.3.1)\n6. Keyboard\
            \ accessibility issues (2.1.1)\n\n**WARNINGS (WCAG Level AA):**\n1. Color\
            \ contrast issues (1.4.3)\n2. Focus indicators (2.4.7)\n3. Resize issues\
            \ (1.4.4)\n4. Audio control (1.4.2)\n\n**SUCCESS CRITERIA:**\n- Proper\
            \ semantic structure\n- Accessible forms\n- Good navigation\n- Screen\
            \ reader compatibility\n\nReturn analysis in this JSON format:\n{\n  \"\
            analysis_summary\": {\n    \"total_issues\": number,\n    \"critical_errors\"\
            : number,\n    \"warnings\": number,\n    \"passed_criteria\": number,\n\
            \    \"compliance_score\": number (0-100)\n  },\n  \"detailed_findings\"\
            : [\n    {\n      \"type\": \"error|warning|success\",\n      \"wcag_criterion\"\
            : \"1.1.1\",\n      \"title\": \"Brief issue title\",\n      \"description\"\
            : \"Detailed description\",\n      \"impact\": \"high|medium|low\",\n\
            \      \"affected_elements\": \"CSS selector or description\",\n     \
            \ \"remediation_priority\": \"critical|high|medium|low\"\n    }\n  ]\n\
            }\n"
        selected: false
        title: WCAG Accessibility Analyzer
        type: llm
        variables: []
        vision:
          enabled: false
      height: 96
      id: wcag-analyzer
      position:
        x: 1246
        y: 300
      positionAbsolute:
        x: 1246
        y: 300
      type: custom
      width: 244
    - data:
        code: "import json\n\ndef main(analysis_result: str) -> dict:\n    \"\"\"\n\
          \    Categorizes and processes WCAG analysis results\n    Structures data\
          \ for storage and further processing\n    \"\"\"\n    try:\n        # Parse\
          \ the analysis JSON\n        analysis = json.loads(analysis_result)\n  \
          \      \n        # Categorize findings\n        errors = []\n        warnings\
          \ = []\n        successes = []\n        \n        for finding in analysis.get('detailed_findings',\
          \ []):\n            finding_obj = {\n                'wcag_criterion': finding.get('wcag_criterion'),\n\
          \                'title': finding.get('title'),\n                'description':\
          \ finding.get('description'),\n                'impact': finding.get('impact'),\n\
          \                'affected_elements': finding.get('affected_elements'),\n\
          \                'priority': finding.get('remediation_priority')\n     \
          \       }\n            \n            if finding.get('type') == 'error':\n\
          \                errors.append(finding_obj)\n            elif finding.get('type')\
          \ == 'warning':\n                warnings.append(finding_obj)\n        \
          \    else:\n                successes.append(finding_obj)\n        \n  \
          \      # Calculate metrics\n        total_issues = len(errors) + len(warnings)\n\
          \        compliance_score = analysis.get('analysis_summary', {}).get('compliance_score',\
          \ 0)\n        \n        result = {\n            'summary': {\n         \
          \       'total_issues': total_issues,\n                'errors': len(errors),\n\
          \                'warnings': len(warnings),\n                'successes':\
          \ len(successes),\n                'compliance_score': compliance_score\n\
          \            },\n            'categorized_findings': {\n               \
          \ 'errors': errors,\n                'warnings': warnings,\n           \
          \     'successes': successes\n            },\n            'needs_remediation':\
          \ total_issues > 0\n        }\n        \n        return {\"structured_results\"\
          : result}\n        \n    except json.JSONDecodeError:\n        return {\n\
          \            \"structured_results\": {\n                \"error\": \"Failed\
          \ to parse analysis results\",\n                \"raw_output\": analysis_result\n\
          \            }\n        }\n"
        code_language: python3
        desc: Categorizes accessibility findings and calculates metrics
        outputs:
          structured_results:
            type: object
        selected: false
        title: Issue Categorizer & Metrics Calculator
        type: code
        variables:
        - value_selector:
          - wcag-analyzer
          - text
          variable: analysis_result
      height: 54
      id: issue-categorizer
      position:
        x: 1550
        y: 300
      positionAbsolute:
        x: 1550
        y: 300
      type: custom
      width: 244
    - data:
        assigned_variable_selector:
        - conversation
        - accessibility_results
        desc: Stores accessibility analysis results in conversation memory
        input_variable_selector:
        - issue-categorizer
        - structured_results
        selected: false
        title: Store Analysis Results
        type: assigner
        write_mode: append
      height: 88
      id: results-storage
      position:
        x: 1854
        y: 300
      positionAbsolute:
        x: 1854
        y: 300
      type: custom
      width: 244
    - data:
        cases:
        - case_id: 'true'
          conditions:
          - comparison_operator: is
            id: needs-remediation-check
            value: true
            varType: boolean
            variable_selector:
            - issue-categorizer
            - structured_results
            - needs_remediation
          id: 'true'
          logical_operator: and
        desc: Determines if AI-powered remediation is needed
        selected: false
        title: Remediation Required?
        type: if-else
      height: 126
      id: remediation-check
      position:
        x: 2158
        y: 300
      positionAbsolute:
        x: 2158
        y: 300
      type: custom
      width: 244
    - data:
        context:
          enabled: false
          variable_selector: []
        desc: Generates AI-powered accessibility remediation suggestions
        model:
          completion_params:
            temperature: 0.4
          mode: chat
          name: gpt-4o
          provider: langgenius/openai/openai
        prompt_template:
        - id: ai-remediation-prompt
          role: system
          text: "You are an expert accessibility developer specializing in WCAG remediation.\
            \ Generate practical, actionable fixes for the identified accessibility\
            \ issues.\n\nAnalysis Results: {{#issue-categorizer.structured_results#}}\n\
            \nFor each ERROR and WARNING, provide detailed remediation:\n\n**REMEDIATION\
            \ FRAMEWORK:**\n1. **Immediate Fixes** - Quick wins that can be implemented\
            \ immediately\n2. **Code Examples** - Specific HTML/CSS/JavaScript solutions\n\
            3. **Best Practices** - Long-term accessibility improvements\n4. **Testing\
            \ Methods** - How to verify the fix works\n\n**FOCUS AREAS:**\n- **Alt\
            \ Text & Images**: Descriptive alternatives for visual content\n- **Form\
            \ Accessibility**: Labels, fieldsets, error handling\n- **Semantic Structure**:\
            \ Proper heading hierarchy, landmarks\n- **Keyboard Navigation**: Focus\
            \ management, skip links\n- **Color & Contrast**: Meeting WCAG AA contrast\
            \ ratios\n- **Screen Reader Support**: ARIA labels and descriptions\n\n\
            Return structured remediation in JSON format:\n{\n  \"remediation_plan\"\
            : {\n    \"priority_fixes\": [\n      {\n        \"wcag_criterion\": \"\
            1.1.1\",\n        \"issue_title\": \"Images without alt text\",\n    \
            \    \"fix_complexity\": \"easy|medium|complex\",\n        \"estimated_time\"\
            : \"15 minutes\",\n        \"before_code\": \"HTML code showing the issue\"\
            ,\n        \"after_code\": \"Fixed HTML code\",\n        \"explanation\"\
            : \"Why this fix improves accessibility\",\n        \"testing_steps\"\
            : [\"How to test the fix\"],\n        \"impact_improvement\": \"High -\
            \ enables screen reader access\"\n      }\n    ],\n    \"css_improvements\"\
            : \"CSS code for better accessibility\",\n    \"javascript_enhancements\"\
            : \"JS code for dynamic accessibility\",\n    \"aria_additions\": \"ARIA\
            \ attributes to add\"\n  }\n}\n"
        selected: false
        title: AI Accessibility Remediator
        type: llm
        variables: []
        vision:
          enabled: false
      height: 96
      id: ai-remediator
      position:
        x: 2462
        y: 200
      positionAbsolute:
        x: 2462
        y: 200
      type: custom
      width: 244
    - data:
        code: "import json\n\ndef main(remediation_response: str) -> dict:\n    \"\
          \"\"\n    Generates complete accessible code solutions\n    Creates before/after\
          \ comparisons and comprehensive fixes\n    \"\"\"\n    try:\n        remediation\
          \ = json.loads(remediation_response)\n        plan = remediation.get('remediation_plan',\
          \ {})\n        \n        # Generate comprehensive code package\n       \
          \ code_package = {\n            'html_fixes': [],\n            'css_improvements':\
          \ plan.get('css_improvements', ''),\n            'javascript_enhancements':\
          \ plan.get('javascript_enhancements', ''),\n            'aria_additions':\
          \ plan.get('aria_additions', ''),\n            'implementation_guide': []\n\
          \        }\n        \n        # Process each fix\n        for fix in plan.get('priority_fixes',\
          \ []):\n            html_fix = {\n                'criterion': fix.get('wcag_criterion'),\n\
          \                'title': fix.get('issue_title'),\n                'complexity':\
          \ fix.get('fix_complexity'),\n                'time_estimate': fix.get('estimated_time'),\n\
          \                'before': fix.get('before_code', ''),\n               \
          \ 'after': fix.get('after_code', ''),\n                'explanation': fix.get('explanation',\
          \ ''),\n                'testing': fix.get('testing_steps', [])\n      \
          \      }\n            code_package['html_fixes'].append(html_fix)\n    \
          \        \n            # Add to implementation guide\n            guide_step\
          \ = {\n                'step': len(code_package['implementation_guide'])\
          \ + 1,\n                'action': f\"Fix {fix.get('wcag_criterion')}: {fix.get('issue_title')}\"\
          ,\n                'complexity': fix.get('fix_complexity'),\n          \
          \      'priority': 'high' if fix.get('fix_complexity') == 'easy' else 'medium'\n\
          \            }\n            code_package['implementation_guide'].append(guide_step)\n\
          \        \n        # Generate complete fixed HTML template\n        complete_template\
          \ = \"\"\"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"\
          UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\
          >\n    <title>Accessibility Enhanced Page</title>\n    <style>\n       \
          \ /* Accessibility Improvements */\n        {}\n    </style>\n</head>\n\
          <body>\n    <!-- Accessibility fixes applied -->\n    {}\n    \n    <script>\n\
          \        // Dynamic accessibility enhancements\n        {}\n    </script>\n\
          </body>\n</html>\"\"\".format(\n    code_package['css_improvements'],\n\
          \    '\\n'.join([fix['after'] for fix in code_package['html_fixes']]),\n\
          \    code_package['javascript_enhancements']\n)\n        \n        code_package['complete_template']\
          \ = complete_template\n        \n        return {\"generated_code\": code_package}\n\
          \        \n    except Exception as e:\n        return {\"generated_code\"\
          : {\"error\": f\"Code generation failed: {str(e)}\"}}\n"
        code_language: python3
        desc: Generates complete accessible code solutions with before/after examples
        outputs:
          generated_code:
            type: object
        selected: false
        title: Accessible Code Generator
        type: code
        variables:
        - value_selector:
          - ai-remediator
          - text
          variable: remediation_response
      height: 54
      id: code-generator
      position:
        x: 2766
        y: 200
      positionAbsolute:
        x: 2766
        y: 200
      type: custom
      width: 244
    - data:
        assigned_variable_selector:
        - conversation
        - remediation_data
        desc: Stores generated remediation code and guidance
        input_variable_selector:
        - code-generator
        - generated_code
        selected: false
        title: Store Remediation Data
        type: assigner
        write_mode: append
      height: 88
      id: remediation-storage
      position:
        x: 3070
        y: 200
      positionAbsolute:
        x: 3070
        y: 200
      type: custom
      width: 244
    - data:
        context:
          enabled: false
          variable_selector: []
        desc: Generates comprehensive accessibility report with remediation
        model:
          completion_params:
            temperature: 0.3
          mode: chat
          name: gpt-4o
          provider: langgenius/openai/openai
        prompt_template:
        - id: comprehensive-report-prompt
          role: system
          text: 'Generate a comprehensive WCAG accessibility report with remediation
            guidance.


            Analysis Results: {{#issue-categorizer.structured_results#}}

            Remediation Solutions: {{#code-generator.generated_code#}}


            Create a detailed report including:


            ## 🛡️ **WCAG Accessibility Analysis Report**


            ### **Executive Summary**

            - Overall compliance score and status

            - Critical issues requiring immediate attention

            - Compliance level achieved (A, AA, AAA)


            ### **📊 Detailed Findings**


            **🚨 Critical Errors (Must Fix)**

            [List all errors with WCAG criteria and impact]


            **⚠️ Warnings (Should Fix)**

            [List all warnings with improvement suggestions]


            **✅ Passed Criteria**

            [Highlight successful accessibility implementations]


            ### **🔧 AI-Powered Remediation Plan**


            **Quick Wins (< 30 minutes)**

            [Easy fixes with high impact]


            **Medium Complexity (1-2 hours)**

            [Moderate fixes requiring some development]


            **Complex Implementation (> 2 hours)**

            [Advanced fixes requiring significant changes]


            ### **💻 Code Solutions**


            For each major issue, provide:

            ```html

            <!-- BEFORE (Inaccessible) -->

            [Current problematic code]


            <!-- AFTER (Accessible) -->

            [Fixed, WCAG-compliant code]

            ```


            ### **🧪 Testing & Validation**

            - Automated testing recommendations

            - Manual testing procedures

            - Screen reader testing steps

            - Keyboard navigation validation


            ### **📈 Next Steps**

            1. Immediate actions (next 24 hours)

            2. Short-term improvements (next week)

            3. Long-term accessibility strategy


            Make the report actionable, specific, and encouraging. Focus on the business
            and user benefits of accessibility improvements.

            '
        selected: false
        title: Comprehensive Report Generator
        type: llm
        variables: []
        vision:
          enabled: false
      height: 96
      id: report-generator
      position:
        x: 3374
        y: 200
      positionAbsolute:
        x: 3374
        y: 200
      type: custom
      width: 244
    - data:
        context:
          enabled: false
          variable_selector: []
        desc: Generates basic accessibility summary for content with no issues
        model:
          completion_params:
            temperature: 0.5
          mode: chat
          name: gpt-4o
          provider: langgenius/openai/openai
        prompt_template:
        - id: basic-report-prompt
          role: system
          text: 'Generate a positive accessibility summary report.


            Analysis Results: {{#issue-categorizer.structured_results#}}


            The analysis found minimal or no accessibility issues. Create an encouraging
            report that:


            ## 🎉 **Excellent Accessibility Implementation!**


            ### **Compliance Status: ✅ WCAG AA Compliant**


            Your content demonstrates strong accessibility practices:


            **✅ Strengths Identified:**

            [List successful accessibility implementations]


            **🚀 Enhancement Opportunities:**

            [Suggest optional improvements for even better accessibility]


            **💡 Maintenance Recommendations:**

            - Regular accessibility audits

            - User testing with assistive technologies

            - Stay updated with WCAG 2.2 guidelines

            - Consider AAA level enhancements


            **🎯 Accessibility Best Practices to Continue:**

            - Semantic HTML structure

            - Proper heading hierarchy

            - Descriptive alt text

            - Keyboard accessibility

            - Color contrast compliance


            Keep up the excellent work in creating inclusive digital experiences!

            '
        selected: false
        title: Basic Accessibility Report
        type: llm
        variables: []
        vision:
          enabled: false
      height: 96
      id: basic-report
      position:
        x: 2462
        y: 400
      positionAbsolute:
        x: 2462
        y: 400
      type: custom
      width: 244
    - data:
        answer: '{{#report-generator.text#}}'
        desc: Final output with comprehensive accessibility report and remediation
        selected: false
        title: Comprehensive Accessibility Report
        type: answer
        variables: []
      height: 105
      id: final-output
      position:
        x: 3678
        y: 200
      positionAbsolute:
        x: 3678
        y: 200
      type: custom
      width: 244
    - data:
        answer: '{{#basic-report.text#}}'
        desc: Output for content with minimal accessibility issues
        selected: false
        title: Basic Accessibility Summary
        type: answer
        variables: []
      height: 105
      id: simple-output
      position:
        x: 2766
        y: 400
      positionAbsolute:
        x: 2766
        y: 400
      type: custom
      width: 244
    - data:
        author: WCAG Expert
        desc: Workflow overview and introduction
        height: 220
        selected: false
        showAuthor: true
        text: '{"root":{"children":[{"children":[{"detail":0,"format":0,"mode":"normal","style":"","text":"🛡️
          WCAG Accessibility Validator & Remediation Workflow","type":"text","version":1},{"type":"linebreak","version":1},{"type":"linebreak","version":1},{"detail":0,"format":0,"mode":"normal","style":"","text":"This
          comprehensive workflow provides:","type":"text","version":1},{"type":"linebreak","version":1},{"detail":0,"format":0,"mode":"normal","style":"","text":"✅
          WCAG 2.1/2.2 compliance analysis","type":"text","version":1},{"type":"linebreak","version":1},{"detail":0,"format":0,"mode":"normal","style":"","text":"🔧
          AI-powered remediation suggestions","type":"text","version":1},{"type":"linebreak","version":1},{"detail":0,"format":0,"mode":"normal","style":"","text":"💻
          Complete code solutions","type":"text","version":1},{"type":"linebreak","version":1},{"detail":0,"format":0,"mode":"normal","style":"","text":"📊
          Detailed compliance reports","type":"text","version":1},{"type":"linebreak","version":1},{"detail":0,"format":0,"mode":"normal","style":"","text":"🎯
          Prioritized implementation guidance","type":"text","version":1}],"direction":"ltr","format":"","indent":0,"type":"paragraph","version":1,"textFormat":0}],"direction":"ltr","format":"","indent":0,"type":"root","version":1}}'
        theme: blue
        title: Workflow Overview
        type: ''
        width: 350
      height: 220
      id: overview-note
      position:
        x: 30
        y: 50
      positionAbsolute:
        x: 30
        y: 50
      type: custom-note
      width: 350
    - data:
        author: WCAG Expert
        desc: Input processing explanation
        height: 180
        selected: false
        showAuthor: true
        text: '{"root":{"children":[{"children":[{"detail":0,"format":0,"mode":"normal","style":"","text":"📝
          Smart Input Processing","type":"text","version":1},{"type":"linebreak","version":1},{"type":"linebreak","version":1},{"detail":0,"format":0,"mode":"normal","style":"","text":"The
          workflow intelligently detects:","type":"text","version":1},{"type":"linebreak","version":1},{"detail":0,"format":0,"mode":"normal","style":"","text":"🌐
          Website URLs for live analysis","type":"text","version":1},{"type":"linebreak","version":1},{"detail":0,"format":0,"mode":"normal","style":"","text":"📄
          HTML content for code review","type":"text","version":1},{"type":"linebreak","version":1},{"detail":0,"format":0,"mode":"normal","style":"","text":"💬
          General accessibility questions","type":"text","version":1},{"type":"linebreak","version":1},{"detail":0,"format":0,"mode":"normal","style":"","text":"⚙️
          WCAG compliance level preferences","type":"text","version":1}],"direction":"ltr","format":"","indent":0,"type":"paragraph","version":1,"textFormat":0}],"direction":"ltr","format":"","indent":0,"type":"root","version":1}}'
        theme: green
        title: Input Detection
        type: ''
        width: 300
      height: 180
      id: input-note
      position:
        x: 420
        y: 50
      positionAbsolute:
        x: 420
        y: 50
      type: custom-note
      width: 300
    - data:
        author: WCAG Expert
        desc: WCAG analysis capabilities
        height: 200
        selected: false
        showAuthor: true
        text: '{"root":{"children":[{"children":[{"detail":0,"format":0,"mode":"normal","style":"","text":"🔍
          Comprehensive WCAG Analysis","type":"text","version":1},{"type":"linebreak","version":1},{"type":"linebreak","version":1},{"detail":0,"format":0,"mode":"normal","style":"","text":"Checks
          all major WCAG criteria:","type":"text","version":1},{"type":"linebreak","version":1},{"detail":0,"format":0,"mode":"normal","style":"","text":"🖼️
          Image alt text (1.1.1)","type":"text","version":1},{"type":"linebreak","version":1},{"detail":0,"format":0,"mode":"normal","style":"","text":"📋
          Form labels (1.3.1, 3.3.2)","type":"text","version":1},{"type":"linebreak","version":1},{"detail":0,"format":0,"mode":"normal","style":"","text":"🎨
          Color contrast (1.4.3)","type":"text","version":1},{"type":"linebreak","version":1},{"detail":0,"format":0,"mode":"normal","style":"","text":"⌨️
          Keyboard access (2.1.1)","type":"text","version":1},{"type":"linebreak","version":1},{"detail":0,"format":0,"mode":"normal","style":"","text":"🏗️
          Semantic structure (1.3.1)","type":"text","version":1}],"direction":"ltr","format":"","indent":0,"type":"paragraph","version":1,"textFormat":0}],"direction":"ltr","format":"","indent":0,"type":"root","version":1}}'
        theme: purple
        title: WCAG Analysis
        type: ''
        width: 320
      height: 200
      id: analysis-note
      position:
        x: 1100
        y: 50
      positionAbsolute:
        x: 1100
        y: 50
      type: custom-note
      width: 320
    - data:
        author: WCAG Expert
        desc: AI remediation capabilities
        height: 220
        selected: false
        showAuthor: true
        text: '{"root":{"children":[{"children":[{"detail":0,"format":0,"mode":"normal","style":"","text":"🤖
          AI-Powered Remediation","type":"text","version":1},{"type":"linebreak","version":1},{"type":"linebreak","version":1},{"detail":0,"format":0,"mode":"normal","style":"","text":"Advanced
          AI generates:","type":"text","version":1},{"type":"linebreak","version":1},{"detail":0,"format":0,"mode":"normal","style":"","text":"💻
          Before/after code examples","type":"text","version":1},{"type":"linebreak","version":1},{"detail":0,"format":0,"mode":"normal","style":"","text":"📚
          Step-by-step implementation","type":"text","version":1},{"type":"linebreak","version":1},{"detail":0,"format":0,"mode":"normal","style":"","text":"⏱️
          Time estimates for fixes","type":"text","version":1},{"type":"linebreak","version":1},{"detail":0,"format":0,"mode":"normal","style":"","text":"🧪
          Testing procedures","type":"text","version":1},{"type":"linebreak","version":1},{"detail":0,"format":0,"mode":"normal","style":"","text":"📋
          Priority-based action plans","type":"text","version":1}],"direction":"ltr","format":"","indent":0,"type":"paragraph","version":1,"textFormat":0}],"direction":"ltr","format":"","indent":0,"type":"root","version":1}}'
        theme: orange
        title: AI Remediation
        type: ''
        width: 340
      height: 220
      id: remediation-note
      position:
        x: 2450
        y: 50
      positionAbsolute:
        x: 2450
        y: 50
      type: custom-note
      width: 340
    - data:
        author: WCAG Expert
        desc: Report generation features
        height: 200
        selected: false
        showAuthor: true
        text: '{"root":{"children":[{"children":[{"detail":0,"format":0,"mode":"normal","style":"","text":"📊
          Comprehensive Reporting","type":"text","version":1},{"type":"linebreak","version":1},{"type":"linebreak","version":1},{"detail":0,"format":0,"mode":"normal","style":"","text":"Professional
          reports include:","type":"text","version":1},{"type":"linebreak","version":1},{"detail":0,"format":0,"mode":"normal","style":"","text":"📈
          Compliance scores & metrics","type":"text","version":1},{"type":"linebreak","version":1},{"detail":0,"format":0,"mode":"normal","style":"","text":"🎯
          Prioritized action items","type":"text","version":1},{"type":"linebreak","version":1},{"detail":0,"format":0,"mode":"normal","style":"","text":"💼
          Business impact analysis","type":"text","version":1},{"type":"linebreak","version":1},{"detail":0,"format":0,"mode":"normal","style":"","text":"🔄
          Implementation roadmap","type":"text","version":1}],"direction":"ltr","format":"","indent":0,"type":"paragraph","version":1,"textFormat":0}],"direction":"ltr","format":"","indent":0,"type":"root","version":1}}'
        theme: teal
        title: Report Generation
        type: ''
        width: 320
      height: 200
      id: report-note
      position:
        x: 3200
        y: 50
      positionAbsolute:
        x: 3200
        y: 50
      type: custom-note
      width: 320
    viewport:
      x: -200
      y: 100
      zoom: 0.8
